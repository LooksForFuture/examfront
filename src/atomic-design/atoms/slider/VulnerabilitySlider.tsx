import { useEffect, useRef } from "react";

interface VulnerabilitySliderProps {
  defaultValue: "Critical" | "High" | "Medium" | "Low";
}

const VulnerabilitySlider = ({ defaultValue }: VulnerabilitySliderProps) => {
  const id = Math.floor(Math.random() * 10000);
  const sliderRef = useRef(null);
  const _value = {
    Critical: 0,
    High: 1,
    Medium: 2,
    Low: 3,
  };

  useEffect(() => {
    const sliderElement = document.getElementById(`slider-pips-${id}`);

    // @ts-ignore
    if (sliderElement && !sliderElement.noUiSlider) {
      try {
        // @ts-ignore
        noUiSlider.create(sliderElement, {
          start: [_value[defaultValue]], // Starting at "mid"
          behaviour: "tap-drag",
          step: 1, // Step between each value
          tooltips: false,
          connect: "lower",
          orientation: "vertical",
          range: {
            min: 0,
            max: 3,
          },
          direction: "rtl", // Reverse direction to flip the values
          pips: {
            mode: "values",
            values: [0, 1, 2, 3], // "low", "mid", "high"
            density: 10,
            format: {
              to: function (value: number) {
                switch (value) {
                  case 0:
                    return "Low";
                  case 1:
                    return "Medium";
                  case 2:
                    return "High";
                  case 3:
                    return "Critical";
                  default:
                    return value;
                }
              },
            },
          },
        });

        // @ts-ignore
        sliderRef.current = sliderElement.noUiSlider;

        // تغییر رنگ بر اساس مقدار انتخاب‌شده
        // @ts-ignore
        sliderRef.current.on("update", function (values, handle) {
          const value = parseInt(values[handle]);
          // @ts-ignore
          switch (value) {
            case 0:
              sliderElement.classList.remove("noUi-warning", "noUi-danger", "noUi-info");
              sliderElement.classList.add("noUi-secondary");
              break;
            case 1:
              sliderElement.classList.remove("noUi-primary", "noUi-warning", "noUi-danger");
              sliderElement.classList.add("noUi-info");
              break;
            case 2:
              sliderElement.classList.remove("noUi-primary", "noUi-info", "noUi-danger");
              sliderElement.classList.add("noUi-warning");
              break;
            case 3:
              sliderElement.classList.remove("noUi-primary", "noUi-info", "noUi-warning");
              sliderElement.classList.add("noUi-danger");
              break;
          }
        });
      } catch (error) {
        console.error("nouislider error: ", error);
      }
    }
  }, []);

  return (
    <div
      className="pb-4 pt-4"
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
      }}
    >
      <div
        className="noUi-info"
        style={{ height: 100 }}
        id={`slider-pips-${id}`}
      ></div>
    </div>
  );
};

export default VulnerabilitySlider;
